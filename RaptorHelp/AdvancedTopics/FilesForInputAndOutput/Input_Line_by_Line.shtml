<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Input Line by Line</title>

<!--(Meta)==========================================================-->

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=1422>
<meta name=layout-width content=934>
<meta name=date content="01 2, 2004 10:19:57 AM">


<!--(Links)=========================================================-->
<link rel="stylesheet" href="../../stylesheet.css">
<!--#include virtual="../navbars/navbarInner.html" -->



</head>

<!--(Body)==========================================================-->


<body>

<h1>Input Line by Line</h1>

<p>In concept, inputting data from a file is identical to inputting from 
 the user. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->In 
 practice, several issues can make file input more complicated.</p>

<p>&nbsp;</p>

<p style="font-weight: bold;">Line-Oriented Input</p>

<p>&nbsp;</p>

<p>When a file is used for input, an Input symbol consumes exactly one 
 line of the file. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 contents of the line determine whether Raptor interprets it as a string 
 or a number (see <a href="../../AdvancedTopics/Strings/String_Input.shtml">String vs. Numeric Input</a>). 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Therefore, 
 a text file created for input must have the desired number of lines to 
 match the number of inputs to be performed. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Further, 
 each of these lines must make sense for the variable that is to input 
 that line of data. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example, a file containing information on a single cadet might have the 
 following lines:</p>

<p>&nbsp;</p>

<p style="font-family: 'Courier New', monospace;">C4C John Doe</p>

<p style="font-family: 'Courier New', monospace;">28</p>

<p style="font-family: 'Courier New', monospace;">3.51</p>

<p>&nbsp;</p>

<p>The data in this file can be read using three Input symbols. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 first Input symbol to be executed should give a value to a variable called 
 something like <span style="font-family: 'Courier New', monospace;">cadet_name</span>. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The second 
 should give a value to a variable like <span style="font-family: 'Courier New', monospace;">squadron</span>. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The third 
 Input symbol should give a value to a variable like <span style="font-family: 'Courier New', monospace;">GPA</span>. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If these 
 Input symbols are executed out of order, the program will be working with 
 meaningless data. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p><span style="font-weight: bold;">Notes:</span> <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->An 
 empty line in a file, when consumed by an Input symbol, will give an <span 
 style="font-style: italic;">empty string</span> (that is, a string with 
 no characters in it) to the input variable. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 an Input symbol is executed after the last line of a file has been consumed, 
 a run-time error occurs.</p>

<p>&nbsp;</p>

<p style="font-weight: bold; font-size: 14pt;">Files of Unknown Size (Advanced 
 Topic)</p>

<p>&nbsp;</p>

<p>Sometimes programs read from a file without knowing in advance how many 
 lines are in the file. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->In 
 such cases, the programmer must have a way to know when the end of the 
 data has been reached. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Raptor 
 provides a function called End_Of_Input that returns true if all lines 
 in a file have been consumed, false otherwise. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->End_Of_Input 
 will normally be used in the diamond symbol to exit a loop.</p>

<p>&nbsp;</p>

<p><span style="font-weight: bold;">Note:</span> <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 editing a file by hand using Notepad or some other editor, be sure not 
 to leave extra blank lines at the bottom of the file. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->When 
 the file is input in a loop that exits when End_Of_Input is true, these 
 blank lines will be consumed by Raptor as empty strings. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 result is that the last few values input will be meaningless (or, if they 
 are going into numeric variables (like array elements), they will cause 
 a run-time error).</p>

<p>&nbsp;</p>

<p style="font-weight: bold;">Example</p>

<p>&nbsp;</p>

<p>Below is a Raptor program that inputs from a file until End_Of_Input 
 is true. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Note 
 the slightly different structure of the loop. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->With 
 count initialized to zero and the exit at the top of the loop, we guarantee 
 that, upon loop exit, count contains exactly the number of values input 
 (and it could even be 0, given an empty file).</p>

<p>&nbsp;</p>

<p><img src="../../Assets/file_end_of_input.bmp"
		x-maintain-ratio=TRUE
		style="border: none;
				width: 509px;
				height: 606px;
				float: none;"
		width=509
		height=606
		border=0></p>

<p>&nbsp;</p>

</body>

</html>
