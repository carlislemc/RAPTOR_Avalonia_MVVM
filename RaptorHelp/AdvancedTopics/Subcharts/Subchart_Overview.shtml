<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Subchart Overview</title>

<!--(Meta)==========================================================-->

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=596>
<meta name=layout-width content=781>
<meta name=date content="07 28, 2004 1:20:32 PM">


<!--(Links)=========================================================-->

<link rel="stylesheet" href="../../stylesheet.css">
<!--#include virtual="../navbars/navbarInner.shtml" -->



</head>

<!--(Body)==========================================================-->


<body>

<h1>Subchart Overview</h1>

<p>Often, we want a program to perform the same steps, or just about the 
 same steps, at different places in the program. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 simple solution is to copy and paste the desired steps from one place 
 to another in the program. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Unfortunately, 
 this can enlarge our program, making it harder to work with, and increase 
 likelihood of errors. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->An 
 alternative is to create a <span style="font-style: italic;">subchart</span> 
 that performs the desired steps, then <span style="font-style: italic;">call</span>&nbsp; 
 the subchart at the places in our program where those steps must be performed.</p>

<p>&nbsp;</p>

<p>Subcharts created by the programmer are similar to procedures already 
 available in Raptor. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Consider 
 the Draw_Circle graphics procedure. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 the programmer had to write all the steps for drawing a circle (that is, 
 finding the coordinates of all <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->pixels 
 which must be set to the desired color and updating them) instead of calling 
 this procedure, a program would require dozens of symbols to draw a single 
 circle. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 a second circle had to be drawn, dozens more symbols would be required. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Fortunately, 
 the <span style="font-style: italic;">call</span> to Draw_Circle hides 
 the details of drawing a circle from our program. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Subcharts 
 written by the Raptor programmer can do the same. <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->They 
 are even used in the same was as built-in Raptor procedures<symbol name="Em Dash"><!--begin!kadov{{-->&#8212<!--}}end!kadov-->using 
 the <span style="font-style: italic;">call</span> symbol.</p>

<p>&nbsp;</p>

<p>Subcharts can break the Raptor program into logical parts which are 
 called as needed by the main Raptor program. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 simplifies design, ensures that flowcharts don't grow to unwieldy sizes, 
 and reduces the chance for errors.</p>

<p>&nbsp;</p>

<p>Variables are shared throughout the main flowchart and all subcharts. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A variable 
 given a value in one subchart or in the main flowchart will have that 
 value (unless it's subsequently changed) in all other subcharts. <!--kadov_tag{{<spaces>}}-->&nbsp;<span 
 style="font-weight: bold;"><!--kadov_tag{{</spaces>}}-->Warning!</span> 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The programmer 
 must be very careful not to inadvertently overwrite shared values by temporarily 
 using a variable in a manner inconsistent with its global program usage. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For example, 
 assume that, in the main flowchart, a variable called <span style="font-family: 'Courier New', monospace;">max</span> 
 is assigned the number of items to process. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Assume 
 further that a subchart calculates the maximum value in an array and stores 
 that value in a variable called <span style="font-family: 'Courier New', monospace;">max</span>. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The original 
 meaning and value of <span style="font-family: 'Courier New', monospace;">max</span> 
 as defined in the main program is now lost!</p>

<p>&nbsp;</p>

<p>For more on passing data to and from subcharts, including a suggestion 
 on how to avoid naming conflicts, click <a href="Calling_Subcharts.shtml">here</a>.</p>

</body>

</html>
