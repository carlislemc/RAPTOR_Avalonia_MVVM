<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Calling Subcharts</title>

<!--(Meta)==========================================================-->

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=631>
<meta name=layout-width content=678>
<meta name=date content="01 1, 2004 2:12:54 PM">


<!--(Links)=========================================================-->

<link rel="stylesheet" href="../../stylesheet.css">
<!--#include virtual="../navbars/navbarInner.shtml" -->



</head>

<!--(Body)==========================================================-->


<body>

<h1>Calling Subcharts</h1>

<p>To call a subchart defined in a Raptor program, simply insert a <span 
 style="font-style: italic;">Call</span> symbol at the desired spot in 
 your program, double-click on the <span style="font-style: italic;">Call</span> 
 symbol to edit it, and enter the name of the subchart to be called there. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A subchart 
 may be called from the Main flowchart or from other subcharts (even from 
 within itself, but this is usually not a good thing to do!).</p>

<p>&nbsp;</p>

<p style="font-weight: bold;">Passing Data to and from Subcharts (Advanced 
 Topic)</p>

<p>&nbsp;</p>

<p>You may have noticed that one nice thing about many built-in Raptor 
 procedures is that the programmer can change their behavior by passing 
 different arguments, or parameters, to the procedures. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example, I can use the same Draw_Circle routine to draw a red circle at 
 coordinate (100,100) and to draw a black circle at coordinate (250,250). 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It would 
 be nice to have this capability with Raptor's subcharts.</p>

<p>&nbsp;</p>

<p>Raptor subcharts do not support passing of arguments or parameters in 
 the style of the built-in routines. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 this limitation can be overcome with careful use of variables.</p>

<p>&nbsp;</p>

<p>The general idea is that a subchart will have special variables used 
 to communicate information with the rest of the program. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->To 
 ensure these variables aren't used elsewhere in the program, it would 
 be wise to name them in a unique way. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 good naming convention might be to start the variable names with the subchart 
 name and an underscore (e.g., <span style="font-family: 'Courier New', monospace;">draw_triangle_x</span> 
 might be an argument variable for a subchart called draw_triangle). <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>To simulate the use of arguments that provide a value to the subchart, 
 the program must first copy (using assignment symbols) required values 
 into the appropriate special subchart variables <span style="font-style: italic;">before</span><span> 
 the subchart is called. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->After 
 the call to the subchart, the program must copy </span>. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->(again 
 using assignment symbols) any values that the subchart has computed for 
 later use by our program (we might call these <span style="font-style: italic;">results</span><span> 
 of the subchart's computation). <!--kadov_tag{{<spaces>}}-->&nbsp;</span>&nbsp;<!--kadov_tag{{</spaces>}}-->These 
 must be copied from the subchart-specific variables to appropriate &quot;permanent&quot; 
 program variables.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

</body>

</html>
