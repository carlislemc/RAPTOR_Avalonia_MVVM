<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Variables in Raptor</title>

<!--(Meta)==========================================================-->

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=686>
<meta name=layout-width content=934>
<meta name=date content="01 5, 2004 10:14:18 AM">


<!--(Links)=========================================================-->

<link rel="stylesheet" href="../stylesheet.css">
<!--#include virtual="../navbars/navbar.html" -->



</head>

<!--(Body)==========================================================-->


<body>

<h1>Variables in Raptor</h1>

<p>A variable can be thought of as a <a href="Names_in_Raptor.shtml">name</a> 
 associated with a value. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 variable is given a value in an Input symbol or in an Assignment symbol. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The first 
 time a variable is given a value, certain attributes for the variable 
 are established:</p>

<p>&nbsp;</p>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>Its type - does it hold a string or a number?</p></li>
	
	<li class=kadov-p><p>Its structure - does it hold a single value, or 
 is it part of an array?</p></li>
</ul>

<p>&nbsp;</p>

<p>Once these attributes are established, they cannot change. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 name will always be associated with the initial type and structure. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 variable initialized as a string must always be used as a string. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 variable initialized as a one-dimensional array of numeric values cannot 
 be changed to a scalar (single) variable later. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 program can determine the type and structure of a variable using the functions 
 <a href="../AdvancedTopics/VariableTypeQueries/Type_Queries.shtml#Is_String">Is_String</a>, <a href="../AdvancedTopics/VariableTypeQueries/Type_Queries.shtml#Is_Array">Is_Array</a>, 
 <a href="../AdvancedTopics/VariableTypeQueries/Type_Queries.shtml#Is_Number">Is_Number</a>, <a href="../AdvancedTopics/VariableTypeQueries/Type_Queries.shtml#Is_2D_Array">Is_2D_Array</a>.</p>

<p>&nbsp;</p>

<p style="font-weight: bold;">Type of a Variable</p>

<p style="font-weight: normal;">&nbsp;</p>

<p style="font-weight: normal;">The type of a variable is established when 
 the variable is first given a value. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 type determines the operations that can be performed on the variable. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For numeric 
 variables, those operations are fairly well-understood (see <a href="../MathInRaptor/math-operators.shtml">Math 
 Operators</a>, <a href="../MathInRaptor/math-functions.shtml">Math (Non-Trigonometric) Functions</a>, 
 and <a href="../MathInRaptor/trig-functions.shtml">Trigonometric Functions</a>). <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 operations on strings are fewer (see <a href="../AdvancedTopics/Strings/String_Operations.shtml">String 
 Operations</a>). <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Numeric 
 comparisons are also familiar (see <a href="../ProgramControl/boolean_expressions.shtml">Boolean 
 Expressions</a>); similar comparisons are available for strings (see <a 
 href="../AdvancedTopics/Strings/String_Comparisons.shtml">String Comparisons</a>). <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>If programs deal only with numeric data, few issues with data type arise. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->When mixing 
 the use of strings and numbers, refer to <a href="../AdvancedTopics/Strings/Strings.shtml">String 
 Variables &amp; Assignment</a> and <a href="../AdvancedTopics/Strings/String_Input.shtml">String vs. 
 Numeric Input</a> to get a full understanding of how types are initially 
 established.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p style="font-weight: bold;">Structure of a Variable - Arrays</p>

<p>&nbsp;</p>

<p>Arrays provide programs with scalability, the ability to deal simply 
 with large amounts of data (see <a href="../Arrays/Array_Overview.shtml">Array Overview</a>). 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->With arrays, 
 one name represents many variables (and their respective values, all of 
 the same type). <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Raptor 
 supports both one-dimensional and two-dimensional arrays. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>If a name is to represent an array variable, it must be <span style="font-style: italic;">indexed</span> 
 the first time it is used. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example, an assignment of the form <span style="font-family: 'Courier New', monospace;">values[1] 
 &lt;- 0</span> tells Raptor that <span style="font-family: 'Courier New', monospace;">values</span> 
 is an array. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->As 
 described in <a href="../Arrays/Creating_Arrays.shtml">Creating Arrays</a>, the array 
 can later grow as new assignments are performed. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->After 
 its initialization, though, <span style="font-family: 'Courier New', monospace;">values</span> 
 must be treated as an array; an assignment of the form <span style="font-family: 'Courier New', monospace;">values 
 &lt;- 3</span> is not allowed. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Similarly, 
 if a variable is initially treated as a scalar (single) value, as in <span 
 style="font-family: 'Courier New', monospace;">grid &lt;- 0</span>, it 
 cannot later be treated as an array, as in <span style="font-family: 'Courier New', monospace;">grid[3,5] 
 &lt;- 6</span>.</p>

</body>

</html>
