<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Names in Raptor</title>

<!--(Meta)==========================================================-->

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=698>
<meta name=layout-width content=934>
<meta name=date content="01 5, 2004 9:49:18 AM">


<!--(Links)=========================================================-->

<link rel="stylesheet" href="../stylesheet.css">
<!--#include virtual="../navbars/navbar.html" -->



</head>

<!--(Body)==========================================================-->


<body>

<h1>Names: <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Rules 
 and Suggestions</h1>

<p style="font-size: 12pt;">Because Raptor is a graphical language, Raptor 
 programs tend to rely less on words than most text-based languages do. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 words still appear in Raptor as variable names, subchart names, procedure 
 names, and function names. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->In 
 computing circles, these names are known as <span style="font-style: italic;">identifiers</span>, 
 and programs must follow certain rules to build correct names or identifiers. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<h1 style="font-size: 14pt;">Rules for Names in Raptor</h1>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>A name must begin with a letter</p></li>
	
	<li class=kadov-p><p>After the first letter may come any sequence of 
 letters, digits, or underscores</p></li>
	
	<li class=kadov-p><p>Spaces are not allowed in a name - a space marks 
 the end of a name</p></li>
	
	<li class=kadov-p><p>Names are NOT case sensitive. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Therefore,</p></li>
	
	<ul style="list-style: disc;"
		type=disc>
		
		<li style="list-style: square;"
			type=square
			class=kadov-p><p><span style="font-family: 'Courier New', monospace;">get_mouse_button</span> 
 means the same thing as <span style="font-family: 'Courier New', monospace;">Get_Mouse_Button</span> 
 and <span style="font-family: 'Courier New', monospace;">GET_MOUSE_BUTTON</span></p></li>
		
		<li style="list-style: square;"
			type=square
			class=kadov-p><p><span style="font-family: 'Courier New', monospace;">Count</span> 
 means the same thing as <span style="font-family: 'Courier New', monospace;">count</span></p></li>
	</ul>
	
	<li class=kadov-p><p>A name may NOT represent more than one thing in 
 a program. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Therefore,</p></li>
	
	<ul style="list-style: disc;"
		type=disc>
		
		<li style="list-style: square;"
			type=square
			class=kadov-p><p>a program may not use a variable called <span 
 style="font-family: 'Courier New', monospace;">e</span>, because <span 
 style="font-family: 'Courier New', monospace;">e</span> is pre-defined 
 in Raptor</p></li>
		
		<li style="list-style: square;"
			type=square
			class=kadov-p><p>a program may not use a variable called <span 
 style="font-family: 'Courier New', monospace;">red</span>, because <span 
 style="font-family: 'Courier New', monospace;">red</span> is pre-defined 
 in Raptor</p></li>
		
		<li style="list-style: square;"
			type=square
			class=kadov-p><p>a programmer may not create a subchart called 
 <span style="font-family: 'Courier New', monospace;">Get_Key</span>, because 
 <span style="font-family: 'Courier New', monospace;">Get_Key</span> is 
 already defined</p></li>
	</ul>
</ul>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>In addition to the above rules which Raptor enforces without exception, 
 there are common naming conventions that should be used to avoid confusion, 
 make programs readable, and minimize the occurrence of errors.</p>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p style="font-weight: bold; font-size: 14pt;">Suggestions for Meaningful 
 Variable Names in Raptor</p>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>Programmers use meaningful variable names so the names themselves identify 
 what each variable is used for. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Below 
 are some rules of thumb for naming variables.</p>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>Use variable names made up of words that describe 
 the contents of the variable</p></li>
	
	<ul style="list-style: square;"
		type=square>
		
		<li class=kadov-p><p><span style="font-family: 'Courier New', monospace;">velocity</span> 
 is a better name than <span style="font-family: 'Courier New', monospace;">v</span></p></li>
	</ul>
	
	<li class=kadov-p><p>Use underscores to make compound words readable</p></li>
	
	<ul style="list-style: square;"
		type=square>
		
		<li class=kadov-p><p><span style="font-family: 'Courier New', monospace;">uav_velocity</span> 
 is a better name than <span style="font-family: 'Courier New', monospace;">uv</span> 
 or <span style="font-family: 'Courier New', monospace;">uavvelocity</span></p></li>
	</ul>
	
	<li class=kadov-p><p>When doing conversions between units, make the 
 units part of the variable name</p></li>
	
	<ul style="list-style: disc;"
		type=disc>
		
		<li style="list-style: square;"
			type=square
			class=kadov-p><p><span style="font-family: 'Courier New', monospace;">theta_radians</span> 
 and <span style="font-family: 'Courier New', monospace;">theta_degrees</span> 
 leave little doubt about the units for the stored values</p></li>
	</ul>
</ul>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

</body>

</html>
